---
# Namespace for JCacheX
apiVersion: v1
kind: Namespace
metadata:
  name: jcachex
  labels:
    name: jcachex
---
# Service Account for discovery
apiVersion: v1
kind: ServiceAccount
metadata:
  name: jcachex-service-account
  namespace: jcachex
---
# Role for service discovery
apiVersion: rbac.authorization.k8s.io/v1
kind: Role
metadata:
  name: jcachex-discovery-role
  namespace: jcachex
rules:
- apiGroups: [""]
  resources: ["pods", "services", "endpoints"]
  verbs: ["get", "list", "watch"]
- apiGroups: ["apps"]
  resources: ["deployments", "replicasets"]
  verbs: ["get", "list", "watch"]
---
# Role Binding
apiVersion: rbac.authorization.k8s.io/v1
kind: RoleBinding
metadata:
  name: jcachex-discovery-binding
  namespace: jcachex
roleRef:
  apiGroup: rbac.authorization.k8s.io
  kind: Role
  name: jcachex-discovery-role
subjects:
- kind: ServiceAccount
  name: jcachex-service-account
  namespace: jcachex
---
# ConfigMap for application configuration
apiVersion: v1
kind: ConfigMap
metadata:
  name: jcachex-config
  namespace: jcachex
data:
  application.yml: |
    jcachex:
      distributed:
        clusterName: kubernetes-cluster
        replicationFactor: 2
        consistencyLevel: EVENTUAL
        nodeDiscovery:
          type: KUBERNETES
          discoveryIntervalSeconds: 30
          healthCheckIntervalSeconds: 10
          kubernetes:
            namespace: jcachex
            serviceName: jcachex-cluster
            labelSelector: app=jcachex,component=cache
            useServiceAccount: true
    logging:
      level:
        io.github.dhruv1110.jcachex: DEBUG
    management:
      endpoints:
        web:
          exposure:
            include: health,info,metrics,prometheus
      endpoint:
        health:
          show-details: always
---
# Service for cluster communication
apiVersion: v1
kind: Service
metadata:
  name: jcachex-cluster
  namespace: jcachex
  labels:
    app: jcachex
    component: cache
spec:
  selector:
    app: jcachex
    component: cache
  ports:
  - port: 8080
    targetPort: 8080
    name: cache
    protocol: TCP
  - port: 8081
    targetPort: 8081
    name: gossip
    protocol: TCP
  type: ClusterIP
---
# Headless service for direct pod access
apiVersion: v1
kind: Service
metadata:
  name: jcachex-cluster-headless
  namespace: jcachex
  labels:
    app: jcachex
    component: cache
spec:
  selector:
    app: jcachex
    component: cache
  ports:
  - port: 8080
    targetPort: 8080
    name: cache
    protocol: TCP
  - port: 8081
    targetPort: 8081
    name: gossip
    protocol: TCP
  clusterIP: None
---
# Deployment for JCacheX cluster
apiVersion: apps/v1
kind: Deployment
metadata:
  name: jcachex-cluster
  namespace: jcachex
  labels:
    app: jcachex
    component: cache
spec:
  replicas: 3
  selector:
    matchLabels:
      app: jcachex
      component: cache
  template:
    metadata:
      labels:
        app: jcachex
        component: cache
      annotations:
        prometheus.io/scrape: "true"
        prometheus.io/port: "8080"
        prometheus.io/path: "/actuator/prometheus"
    spec:
      serviceAccountName: jcachex-service-account
      containers:
      - name: jcachex
        image: jcachex:latest
        imagePullPolicy: IfNotPresent
        ports:
        - containerPort: 8080
          name: cache
          protocol: TCP
        - containerPort: 8081
          name: gossip
          protocol: TCP
        env:
        - name: SPRING_PROFILES_ACTIVE
          value: "kubernetes"
        - name: JAVA_OPTS
          value: "-Xmx512m -Xms256m"
        - name: POD_NAME
          valueFrom:
            fieldRef:
              fieldPath: metadata.name
        - name: POD_NAMESPACE
          valueFrom:
            fieldRef:
              fieldPath: metadata.namespace
        - name: POD_IP
          valueFrom:
            fieldRef:
              fieldPath: status.podIP
        volumeMounts:
        - name: config
          mountPath: /app/config
          readOnly: true
        resources:
          requests:
            memory: "256Mi"
            cpu: "250m"
          limits:
            memory: "512Mi"
            cpu: "500m"
        readinessProbe:
          httpGet:
            path: /actuator/health/readiness
            port: 8080
          initialDelaySeconds: 30
          periodSeconds: 10
          timeoutSeconds: 5
          failureThreshold: 3
        livenessProbe:
          httpGet:
            path: /actuator/health/liveness
            port: 8080
          initialDelaySeconds: 60
          periodSeconds: 15
          timeoutSeconds: 5
          failureThreshold: 3
        startupProbe:
          httpGet:
            path: /actuator/health
            port: 8080
          initialDelaySeconds: 10
          periodSeconds: 5
          timeoutSeconds: 3
          failureThreshold: 30
      volumes:
      - name: config
        configMap:
          name: jcachex-config
      restartPolicy: Always
      terminationGracePeriodSeconds: 30
---
# HorizontalPodAutoscaler for auto-scaling
apiVersion: autoscaling/v2
kind: HorizontalPodAutoscaler
metadata:
  name: jcachex-cluster-hpa
  namespace: jcachex
spec:
  scaleTargetRef:
    apiVersion: apps/v1
    kind: Deployment
    name: jcachex-cluster
  minReplicas: 3
  maxReplicas: 10
  metrics:
  - type: Resource
    resource:
      name: cpu
      target:
        type: Utilization
        averageUtilization: 70
  - type: Resource
    resource:
      name: memory
      target:
        type: Utilization
        averageUtilization: 80
  behavior:
    scaleUp:
      stabilizationWindowSeconds: 60
      policies:
      - type: Percent
        value: 100
        periodSeconds: 15
    scaleDown:
      stabilizationWindowSeconds: 300
      policies:
      - type: Percent
        value: 10
        periodSeconds: 60
---
# PodDisruptionBudget for high availability
apiVersion: policy/v1
kind: PodDisruptionBudget
metadata:
  name: jcachex-cluster-pdb
  namespace: jcachex
spec:
  minAvailable: 2
  selector:
    matchLabels:
      app: jcachex
      component: cache
