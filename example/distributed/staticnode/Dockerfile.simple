# Simplified Dockerfile using basic OpenJDK images as fallback
# Use this if the main Dockerfile has platform compatibility issues

# Build stage
FROM openjdk:17-jdk-slim AS builder

WORKDIR /workspace/app

# Install required tools
RUN apt-get update && apt-get install -y dos2unix && rm -rf /var/lib/apt/lists/*

# Copy gradle wrapper and build files
COPY gradle/ gradle/
COPY gradlew .
COPY settings.gradle.kts .
COPY build.gradle.kts .

# Copy source code
COPY jcachex-core/ jcachex-core/
COPY jcachex-spring/ jcachex-spring/
COPY example/distributed/staticnode/ example/distributed/staticnode/

# Fix line endings and make gradlew executable
RUN dos2unix ./gradlew && chmod +x ./gradlew

# Build the application
RUN ./gradlew :example:distributed:staticnode:bootJar --no-daemon

# Runtime stage
FROM openjdk:17-jre-slim

LABEL maintainer="JCacheX Team"
LABEL description="JCacheX Distributed Cache Static Node Example (Simple Build)"

# Install necessary packages
RUN apt-get update && apt-get install -y \
    curl \
    netcat-openbsd \
    && rm -rf /var/lib/apt/lists/*

# Create non-root user
RUN groupadd -r jcachex && useradd -r -g jcachex jcachex

# Create app directory
RUN mkdir -p /app && chown jcachex:jcachex /app

WORKDIR /app

# Copy the built jar from builder stage
COPY --from=builder /workspace/app/example/distributed/staticnode/build/libs/distributed-cache-example.jar app.jar

# Change ownership
RUN chown jcachex:jcachex app.jar

# Switch to non-root user
USER jcachex

# Expose ports
EXPOSE 8080 8081

# Health check
HEALTHCHECK --interval=30s --timeout=10s --start-period=60s --retries=3 \
    CMD curl -f http://localhost:8080/actuator/health || exit 1

# Set JVM options for containerized environment
ENV JAVA_OPTS="-Xmx512m -Xms256m -XX:+UseG1GC -XX:+UseContainerSupport -Djava.security.egd=file:/dev/./urandom"

# Entry point
ENTRYPOINT ["sh", "-c", "java $JAVA_OPTS -jar app.jar"]
