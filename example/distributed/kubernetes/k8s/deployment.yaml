# RBAC Configuration for JCacheX distributed cache
apiVersion: v1
kind: ServiceAccount
metadata:
  name: jcachex-service-account
  labels:
    app: jcachex-kubernetes-example
---
apiVersion: rbac.authorization.k8s.io/v1
kind: Role
metadata:
  name: jcachex-role
  labels:
    app: jcachex-kubernetes-example
rules:
- apiGroups: [""]
  resources: ["pods", "endpoints", "services"]
  verbs: ["get", "list", "watch"]
---
apiVersion: rbac.authorization.k8s.io/v1
kind: RoleBinding
metadata:
  name: jcachex-role-binding
  labels:
    app: jcachex-kubernetes-example
subjects:
- kind: ServiceAccount
  name: jcachex-service-account
  namespace: default
roleRef:
  kind: Role
  name: jcachex-role
  apiGroup: rbac.authorization.k8s.io
---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: jcachex-kubernetes-example
  labels:
    app: jcachex-kubernetes-example
spec:
  replicas: 2
  selector:
    matchLabels:
      app: jcachex-kubernetes-example
  template:
    metadata:
      labels:
        app: jcachex-kubernetes-example
    spec:
      serviceAccountName: jcachex-service-account
      containers:
      - name: jcachex-app
        image: jcachex-kubernetes-example:latest
        imagePullPolicy: Never
        ports:
        - containerPort: 8080  # Web server
        - containerPort: 8081  # Distributed cache communication
        env:
        - name: SPRING_PROFILES_ACTIVE
          value: "kubernetes"
        resources:
          requests:
            memory: "256Mi"
            cpu: "250m"
          limits:
            memory: "512Mi"
            cpu: "500m"
        livenessProbe:
          httpGet:
            path: /api/health
            port: 8080
          initialDelaySeconds: 30
          periodSeconds: 10
        readinessProbe:
          httpGet:
            path: /api/health
            port: 8080
          initialDelaySeconds: 5
          periodSeconds: 5
---
apiVersion: v1
kind: Service
metadata:
  name: jcachex-kubernetes-example-service
  labels:
    app: jcachex-kubernetes-example
spec:
  type: ClusterIP
  ports:
  - port: 80
    targetPort: 8080
    protocol: TCP
  selector:
    app: jcachex-kubernetes-example
---
apiVersion: v1
kind: Service
metadata:
  name: jcachex-kubernetes-example-nodeport
  labels:
    app: jcachex-kubernetes-example
spec:
  type: NodePort
  ports:
  - port: 8080
    targetPort: 8080
    nodePort: 30080
    protocol: TCP
  selector:
    app: jcachex-kubernetes-example
---
# Service for distributed cache cluster discovery
apiVersion: v1
kind: Service
metadata:
  name: jcachex-cluster
  labels:
    app: jcachex-kubernetes-example
spec:
  type: ClusterIP
  clusterIP: None  # Headless service for pod discovery
  ports:
  - name: web
    port: 8080
    targetPort: 8080
    protocol: TCP
  - name: cache
    port: 8081
    targetPort: 8081
    protocol: TCP
  selector:
    app: jcachex-kubernetes-example
