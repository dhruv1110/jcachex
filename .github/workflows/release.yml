name: Release

on:
  workflow_dispatch:
    inputs:
      version_type:
        description: 'Version increment type'
        required: true
        default: 'patch'
        type: choice
        options:
          - patch
          - minor
          - major
      release_notes:
        description: 'Release notes (optional)'
        required: false
        type: string

jobs:
  release:
    runs-on: ubuntu-latest
    permissions:
      contents: write
      packages: write
      issues: write
      pull-requests: write

    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      with:
        token: ${{ secrets.GITHUB_TOKEN }}
        fetch-depth: 0

    - name: Set up JDK 8
      uses: actions/setup-java@v4
      with:
        java-version: '8'
        distribution: 'temurin'
        cache: gradle

    - name: Grant execute permission for gradlew
      run: chmod +x gradlew

    - name: Configure Git
      run: |
        git config --global user.name 'github-actions[bot]'
        git config --global user.email 'github-actions[bot]@users.noreply.github.com'

    - name: Get current version from latest Git tag
      id: current_version
      run: |
        # Get the latest tag, or default to 0.0.0 if no tags exist
        LATEST_TAG=$(git describe --tags --abbrev=0 2>/dev/null || echo "v0.0.0")
        # Remove 'v' prefix if present
        CURRENT_VERSION=${LATEST_TAG#v}

        echo "Latest tag: $LATEST_TAG"
        echo "Current version: $CURRENT_VERSION"

        # Validate version format (semantic versioning)
        if ! [[ $CURRENT_VERSION =~ ^[0-9]+\.[0-9]+\.[0-9]+$ ]]; then
          echo "❌ Error: Invalid version format '$CURRENT_VERSION'. Expected: X.Y.Z"
          exit 1
        fi

        # Check if tag was created by this workflow (has corresponding release)
        if [ "$LATEST_TAG" != "v0.0.0" ]; then
          RELEASE_EXISTS=$(gh api repos/${{ github.repository }}/releases/tags/$LATEST_TAG --jq '.tag_name' 2>/dev/null || echo "")
          if [ -z "$RELEASE_EXISTS" ]; then
            echo "⚠️  Warning: Tag $LATEST_TAG exists but no corresponding release found"
            echo "This might indicate a manually created tag"
          else
            echo "✅ Tag $LATEST_TAG has corresponding release"
          fi
        fi

        echo "current_version=$CURRENT_VERSION" >> $GITHUB_OUTPUT
      env:
        GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}

    - name: Calculate new version
      id: new_version
      run: |
        CURRENT_VERSION="${{ steps.current_version.outputs.current_version }}"
        IFS='.' read -ra VERSION_PARTS <<< "$CURRENT_VERSION"
        MAJOR=${VERSION_PARTS[0]}
        MINOR=${VERSION_PARTS[1]}
        PATCH=${VERSION_PARTS[2]}

        case "${{ github.event.inputs.version_type }}" in
          major)
            MAJOR=$((MAJOR + 1))
            MINOR=0
            PATCH=0
            ;;
          minor)
            MINOR=$((MINOR + 1))
            PATCH=0
            ;;
          patch)
            PATCH=$((PATCH + 1))
            ;;
        esac

        NEW_VERSION="$MAJOR.$MINOR.$PATCH"

        echo "🔄 Version increment:"
        echo "  Current: $CURRENT_VERSION"
        echo "  New:     $NEW_VERSION"
        echo "  Type:    ${{ github.event.inputs.version_type }}"

        # Validate that new version is actually newer
        if [ "$NEW_VERSION" = "$CURRENT_VERSION" ]; then
          echo "❌ Error: New version ($NEW_VERSION) is same as current version"
          exit 1
        fi

        # Check if this version already exists as a tag
        if git tag -l "v$NEW_VERSION" | grep -q "v$NEW_VERSION"; then
          echo "❌ Error: Tag v$NEW_VERSION already exists"
          exit 1
        fi

        echo "✅ Version validation passed"
        echo "new_version=$NEW_VERSION" >> $GITHUB_OUTPUT

    - name: Update version in build.gradle.kts
      run: |
        NEW_VERSION="${{ steps.new_version.outputs.new_version }}"
        sed -i "s/version = \".*\"/version = \"$NEW_VERSION\"/" build.gradle.kts

    - name: Run tests
      run: ./gradlew test

    - name: Import GPG key
      uses: crazy-max/ghaction-import-gpg@v6
      with:
        gpg_private_key: ${{ secrets.GPG_PRIVATE_KEY }}
        passphrase: ${{ secrets.GPG_PASSWORD }}

    - name: Stage artifacts locally
      run: ./gradlew publish

    - name: Run JReleaser
      env:
        JRELEASER_GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        JRELEASER_MAVENCENTRAL_USERNAME: ${{ secrets.MAVENCENTRAL_USERNAME }}
        JRELEASER_MAVENCENTRAL_PASSWORD: ${{ secrets.MAVENCENTRAL_PASSWORD }}
        JRELEASER_GPG_PASSPHRASE: ${{ secrets.GPG_PASSWORD }}
        JRELEASER_GPG_PUBLIC_KEY: ${{ secrets.GPG_PUBLIC_KEY }}
        JRELEASER_GPG_SECRET_KEY: ${{ secrets.GPG_PRIVATE_KEY }}
      run: ./gradlew jreleaserFullRelease

    - name: JReleaser output
      if: always()
      uses: actions/upload-artifact@v4
      with:
        name: jreleaser-logs
        path: |
          build/jreleaser/trace.log
          build/jreleaser/output.properties
