name: Release

on:
  workflow_dispatch:
    inputs:
      version_type:
        description: 'Version increment type'
        required: true
        default: 'patch'
        type: choice
        options:
          - patch
          - minor
          - major
      release_notes:
        description: 'Release notes (optional)'
        required: false
        type: string

jobs:
  release:
    runs-on: ubuntu-latest
    permissions:
      contents: write
      packages: write
      issues: write
      pull-requests: write

    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      with:
        token: ${{ secrets.GITHUB_TOKEN }}
        fetch-depth: 0

    - name: Set up JDK 8
      uses: actions/setup-java@v4
      with:
        java-version: '8'
        distribution: 'temurin'
        cache: gradle

    - name: Grant execute permission for gradlew
      run: chmod +x gradlew

    - name: Configure Git
      run: |
        git config --global user.name 'github-actions[bot]'
        git config --global user.email 'github-actions[bot]@users.noreply.github.com'

    - name: Get current version from latest Git tag
      id: current_version
      run: |
        # Get the latest tag, or default to 0.0.0 if no tags exist
        LATEST_TAG=$(git describe --tags --abbrev=0 2>/dev/null || echo "v0.0.0")
        # Remove 'v' prefix if present
        CURRENT_VERSION=${LATEST_TAG#v}

        echo "Latest tag: $LATEST_TAG"
        echo "Current version: $CURRENT_VERSION"

        # Validate version format (semantic versioning)
        if ! [[ $CURRENT_VERSION =~ ^[0-9]+\.[0-9]+\.[0-9]+$ ]]; then
          echo "‚ùå Error: Invalid version format '$CURRENT_VERSION'. Expected: X.Y.Z"
          exit 1
        fi

        # Check if tag was created by this workflow (has corresponding release)
        if [ "$LATEST_TAG" != "v0.0.0" ]; then
          RELEASE_EXISTS=$(gh api repos/${{ github.repository }}/releases/tags/$LATEST_TAG --jq '.tag_name' 2>/dev/null || echo "")
          if [ -z "$RELEASE_EXISTS" ]; then
            echo "‚ö†Ô∏è  Warning: Tag $LATEST_TAG exists but no corresponding release found"
            echo "This might indicate a manually created tag"
          else
            echo "‚úÖ Tag $LATEST_TAG has corresponding release"
          fi
        fi

        echo "current_version=$CURRENT_VERSION" >> $GITHUB_OUTPUT
      env:
        GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}

    - name: Calculate new version
      id: new_version
      run: |
        CURRENT_VERSION="${{ steps.current_version.outputs.current_version }}"
        IFS='.' read -ra VERSION_PARTS <<< "$CURRENT_VERSION"
        MAJOR=${VERSION_PARTS[0]}
        MINOR=${VERSION_PARTS[1]}
        PATCH=${VERSION_PARTS[2]}

        case "${{ github.event.inputs.version_type }}" in
          major)
            MAJOR=$((MAJOR + 1))
            MINOR=0
            PATCH=0
            ;;
          minor)
            MINOR=$((MINOR + 1))
            PATCH=0
            ;;
          patch)
            PATCH=$((PATCH + 1))
            ;;
        esac

        NEW_VERSION="$MAJOR.$MINOR.$PATCH"

        echo "üîÑ Version increment:"
        echo "  Current: $CURRENT_VERSION"
        echo "  New:     $NEW_VERSION"
        echo "  Type:    ${{ github.event.inputs.version_type }}"

        # Validate that new version is actually newer
        if [ "$NEW_VERSION" = "$CURRENT_VERSION" ]; then
          echo "‚ùå Error: New version ($NEW_VERSION) is same as current version"
          exit 1
        fi

        # Check if this version already exists as a tag
        if git tag -l "v$NEW_VERSION" | grep -q "v$NEW_VERSION"; then
          echo "‚ùå Error: Tag v$NEW_VERSION already exists"
          exit 1
        fi

        echo "‚úÖ Version validation passed"
        echo "new_version=$NEW_VERSION" >> $GITHUB_OUTPUT

    - name: Update version in build.gradle.kts
      run: |
        NEW_VERSION="${{ steps.new_version.outputs.new_version }}"
        sed -i "s/version = \".*\"/version = \"$NEW_VERSION\"/" build.gradle.kts
        echo "Updated version to: $NEW_VERSION"
        grep "version = " build.gradle.kts

    - name: Clean and run tests
      run: |
        ./gradlew clean
        ./gradlew test

    - name: Generate documentation
      run: |
        ./gradlew javadoc javadocJar
        echo "Generated javadoc JARs:"
        find . -name "*javadoc*.jar" -type f | head -10

    - name: Verify javadoc content
      run: |
        echo "Verifying javadoc JAR contents..."
        for jar in $(find . -name "*javadoc*.jar" -type f); do
          echo "=== Checking $jar ==="
          # Check if index.html exists in the JAR
          if jar -tf "$jar" | grep -q "index.html"; then
            echo "‚úÖ $jar contains index.html"
          else
            echo "‚ùå $jar missing index.html"
            echo "JAR contents:"
            jar -tf "$jar" | head -20
            exit 1
          fi
          # Check JAR size (should be more than just META-INF)
          jar_size=$(stat -c%s "$jar")
          if [ "$jar_size" -lt 10000 ]; then
            echo "‚ùå $jar is suspiciously small ($jar_size bytes)"
            jar -tf "$jar"
            exit 1
          else
            echo "‚úÖ $jar size looks good ($jar_size bytes)"
          fi
        done

    - name: Import GPG key
      uses: crazy-max/ghaction-import-gpg@v6
      with:
        gpg_private_key: ${{ secrets.GPG_PRIVATE_KEY }}
        passphrase: ${{ secrets.GPG_PASSWORD }}

    - name: Verify GPG key import
      run: |
        echo "GPG keys available:"
        gpg --list-keys
        echo "GPG secret keys available:"
        gpg --list-secret-keys

    - name: Stage artifacts locally
      run: |
        ./gradlew publish
        echo "Staged artifacts:"
        find build/staging-deploy -name "*.pom" | head -5

    - name: Create release summary
      run: |
        NEW_VERSION="${{ steps.new_version.outputs.new_version }}"
        echo "## üöÄ Release Summary" >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY
        echo "**Version**: \`v$NEW_VERSION\`" >> $GITHUB_STEP_SUMMARY
        echo "**Release Type**: ${{ github.event.inputs.version_type }}" >> $GITHUB_STEP_SUMMARY
        echo "**Branch**: \`${{ github.ref_name }}\`" >> $GITHUB_STEP_SUMMARY
        echo "**Commit**: [\`${GITHUB_SHA:0:7}\`](https://github.com/${{ github.repository }}/commit/${{ github.sha }})" >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY
        echo "### üì¶ Artifacts to be released:" >> $GITHUB_STEP_SUMMARY
        echo "\`\`\`" >> $GITHUB_STEP_SUMMARY
        find build/staging-deploy -name "*.jar" -o -name "*.pom" | head -10 >> $GITHUB_STEP_SUMMARY
        echo "\`\`\`" >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY
        echo "### üîó Links:" >> $GITHUB_STEP_SUMMARY
        echo "- **Repository**: https://github.com/${{ github.repository }}" >> $GITHUB_STEP_SUMMARY
        echo "- **Compare Changes**: https://github.com/${{ github.repository }}/compare/v${{ steps.current_version.outputs.current_version }}...main" >> $GITHUB_STEP_SUMMARY
        echo "- **Maven Central**: https://central.sonatype.com/search?q=io.github.dhruv1110" >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY
        echo "‚ö†Ô∏è **Manual approval required before proceeding with release!**" >> $GITHUB_STEP_SUMMARY

    - name: üõë Manual Approval Required
      uses: trstringer/manual-approval@v1
      with:
        secret: ${{ github.TOKEN }}
        approvers: dhruv1110
        minimum-approvals: 1
        issue-title: "üöÄ Release Approval Required: v${{ steps.new_version.outputs.new_version }}"
        issue-body: |
          ## Release Approval Required üöÄ

          **Version**: `v${{ steps.new_version.outputs.new_version }}`
          **Release Type**: ${{ github.event.inputs.version_type }}
          **Triggered by**: @${{ github.actor }}

          ### üìã Pre-release Checklist
          - [ ] Version number is correct
          - [ ] All tests are passing
          - [ ] Artifacts are properly staged
          - [ ] GPG signing is working
          - [ ] Ready for Maven Central publication

          ### üîó Useful Links
          - **Workflow Run**: ${{ github.server_url }}/${{ github.repository }}/actions/runs/${{ github.run_id }}
          - **Compare Changes**: https://github.com/${{ github.repository }}/compare/v${{ steps.current_version.outputs.current_version }}...main
          - **Repository**: https://github.com/${{ github.repository }}

          ### ‚ö†Ô∏è Important Notes
          - Once approved, this will create a **permanent release** on Maven Central
          - Maven Central artifacts **cannot be deleted** after publication
          - The release will create a Git tag `v${{ steps.new_version.outputs.new_version }}`

          **Please review everything carefully before approving!**

          ---

          **To approve**: Comment `approved`, `approve`, `lgtm`, or `yes`
          **To reject**: Comment `denied`, `deny`, `rejected`, or `no`
        exclude-workflow-initiator-as-approver: false

    - name: Run JReleaser
      env:
        JRELEASER_GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        JRELEASER_MAVENCENTRAL_SONATYPE_USERNAME: ${{ secrets.MAVENCENTRAL_USERNAME }}
        JRELEASER_MAVENCENTRAL_SONATYPE_PASSWORD: ${{ secrets.MAVENCENTRAL_PASSWORD }}
        JRELEASER_GPG_PASSPHRASE: ${{ secrets.GPG_PASSWORD }}
        JRELEASER_GPG_PUBLIC_KEY: ${{ secrets.GPG_PUBLIC_KEY }}
        JRELEASER_GPG_SECRET_KEY: ${{ secrets.GPG_PRIVATE_KEY }}
        JRELEASER_DEPLOY_ACTIVE: ALWAYS
        JRELEASER_DEPLOY_MAVEN_ACTIVE: ALWAYS
        JRELEASER_DEPLOY_MAVEN_MAVENCENTRAL_ACTIVE: ALWAYS
      run: ./gradlew jreleaserFullRelease

    - name: JReleaser output
      if: always()
      uses: actions/upload-artifact@v4
      with:
        name: jreleaser-logs
        path: |
          build/jreleaser/trace.log
          build/jreleaser/output.properties

    - name: Create release completion summary
      if: success()
      run: |
        NEW_VERSION="${{ steps.new_version.outputs.new_version }}"
        echo "## ‚úÖ Release Completed Successfully!" >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY
        echo "**üéâ Version \`v$NEW_VERSION\` has been released!**" >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY
        echo "### üîó Release Links:" >> $GITHUB_STEP_SUMMARY
        echo "- **üìã GitHub Release**: https://github.com/${{ github.repository }}/releases/tag/v$NEW_VERSION" >> $GITHUB_STEP_SUMMARY
        echo "- **üè∑Ô∏è Git Tag**: https://github.com/${{ github.repository }}/tree/v$NEW_VERSION" >> $GITHUB_STEP_SUMMARY
        echo "- **üìä Compare**: https://github.com/${{ github.repository }}/compare/v${{ steps.current_version.outputs.current_version }}...v$NEW_VERSION" >> $GITHUB_STEP_SUMMARY
        echo "- **üì¶ Maven Central**: https://central.sonatype.com/search?q=io.github.dhruv1110+AND+v:$NEW_VERSION" >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY
        echo "### üìö Documentation:" >> $GITHUB_STEP_SUMMARY
        echo "- **üìñ API Docs**: https://dhruv1110.github.io/jcachex/" >> $GITHUB_STEP_SUMMARY
        echo "- **üìÑ Javadoc.io**: https://javadoc.io/doc/io.github.dhruv1110/" >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY
        echo "### üöÄ Usage:" >> $GITHUB_STEP_SUMMARY
        echo "\`\`\`gradle" >> $GITHUB_STEP_SUMMARY
        echo "// Gradle (build.gradle)" >> $GITHUB_STEP_SUMMARY
        echo "implementation 'io.github.dhruv1110:jcachex-core:$NEW_VERSION'" >> $GITHUB_STEP_SUMMARY
        echo "implementation 'io.github.dhruv1110:jcachex-kotlin:$NEW_VERSION'" >> $GITHUB_STEP_SUMMARY
        echo "implementation 'io.github.dhruv1110:jcachex-spring:$NEW_VERSION'" >> $GITHUB_STEP_SUMMARY
        echo "\`\`\`" >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY
        echo "\`\`\`xml" >> $GITHUB_STEP_SUMMARY
        echo "<!-- Maven (pom.xml) -->" >> $GITHUB_STEP_SUMMARY
        echo "<dependency>" >> $GITHUB_STEP_SUMMARY
        echo "    <groupId>io.github.dhruv1110</groupId>" >> $GITHUB_STEP_SUMMARY
        echo "    <artifactId>jcachex-core</artifactId>" >> $GITHUB_STEP_SUMMARY
        echo "    <version>$NEW_VERSION</version>" >> $GITHUB_STEP_SUMMARY
        echo "</dependency>" >> $GITHUB_STEP_SUMMARY
        echo "\`\`\`" >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY
        echo "**üéØ The artifacts should be available on Maven Central within 10-30 minutes.**" >> $GITHUB_STEP_SUMMARY

    - name: Create commit-to-tag link comment
      if: success()
      uses: actions/github-script@v7
      with:
        script: |
          const newVersion = '${{ steps.new_version.outputs.new_version }}';
          const currentCommit = context.sha;
          const tagName = `v${newVersion}`;

          // Create a comment on the commit linking to the tag
          await github.rest.repos.createCommitComment({
            owner: context.repo.owner,
            repo: context.repo.repo,
            commit_sha: currentCommit,
            body: `üöÄ **Released as ${tagName}**\n\n` +
                  `This commit was released as [${tagName}](https://github.com/${context.repo.owner}/${context.repo.repo}/releases/tag/${tagName})\n\n` +
                  `üì¶ **Maven Central**: \`io.github.dhruv1110:jcachex-*:${newVersion}\`\n` +
                  `üìã **Release Notes**: https://github.com/${context.repo.owner}/${context.repo.repo}/releases/tag/${tagName}\n` +
                  `üìä **Changes**: https://github.com/${context.repo.owner}/${context.repo.repo}/compare/v${{ steps.current_version.outputs.current_version }}...${tagName}`
          });

          console.log(`‚úÖ Created commit comment linking ${currentCommit.substring(0,7)} to ${tagName}`);

          // Also create an issue comment if this was triggered manually
          if (context.eventName === 'workflow_dispatch') {
            await github.rest.issues.create({
              owner: context.repo.owner,
              repo: context.repo.repo,
              title: `üéâ Release ${tagName} completed`,
              body: `## Release ${tagName} Completed Successfully! üöÄ\n\n` +
                    `**Commit**: [\`${currentCommit.substring(0,7)}\`](https://github.com/${context.repo.owner}/${context.repo.repo}/commit/${currentCommit})\n` +
                    `**Tag**: [${tagName}](https://github.com/${context.repo.owner}/${context.repo.repo}/tree/${tagName})\n` +
                    `**Release**: [View Release](https://github.com/${context.repo.owner}/${context.repo.repo}/releases/tag/${tagName})\n\n` +
                    `### üì¶ Artifacts Published:\n` +
                    `- \`io.github.dhruv1110:jcachex-core:${newVersion}\`\n` +
                    `- \`io.github.dhruv1110:jcachex-kotlin:${newVersion}\`\n` +
                    `- \`io.github.dhruv1110:jcachex-spring:${newVersion}\`\n\n` +
                    `### üîó Links:\n` +
                    `- [Maven Central Search](https://central.sonatype.com/search?q=io.github.dhruv1110+AND+v:${newVersion})\n` +
                    `- [Documentation](https://dhruv1110.github.io/jcachex/)\n` +
                    `- [Compare Changes](https://github.com/${context.repo.owner}/${context.repo.repo}/compare/v${{ steps.current_version.outputs.current_version }}...${tagName})\n\n` +
                    `*Artifacts should be available on Maven Central within 10-30 minutes.*`,
              labels: ['release', 'published']
            });
          }

    outputs:
      new_version: ${{ steps.new_version.outputs.new_version }}

  update-documentation:
    runs-on: ubuntu-latest
    needs: release
    permissions:
      contents: read
      pages: write
      id-token: write

    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      with:
        ref: main
        fetch-depth: 0

    - name: Create documentation site
      run: |
        # Convert README to HTML using the template
        RELEASE_VERSION=${{ needs.release.outputs.new_version }} \
        python3 .github/scripts/convert-readme.py README.md .github/templates/index.html docs/index.html

    - name: Setup Pages
      uses: actions/configure-pages@v5

    - name: Upload artifact
      uses: actions/upload-pages-artifact@v3
      with:
        path: docs/

    - name: Deploy to GitHub Pages
      id: deployment
      uses: actions/deploy-pages@v4

    - name: Update documentation summary
      run: |
        echo "## üìö Documentation Updated" >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY
        echo "### üåê Live Documentation" >> $GITHUB_STEP_SUMMARY
        echo "- **Homepage**: https://dhruv1110.github.io/jcachex/" >> $GITHUB_STEP_SUMMARY
        echo "- **API Documentation**: https://javadoc.io/doc/io.github.dhruv1110/" >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY
        echo "### üì¶ Latest Version" >> $GITHUB_STEP_SUMMARY
        echo "**${{ needs.release.outputs.new_version }}** - Released $(date '+%Y-%m-%d')" >> $GITHUB_STEP_SUMMARY
