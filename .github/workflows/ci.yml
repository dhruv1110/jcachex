name: CI

on:
  pull_request:
    branches: [ main, develop ]
  push:
    branches: [ main ]

jobs:
  tests:
    runs-on: ubuntu-latest

    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      with:
        fetch-depth: 0  # Shallow clones should be disabled for better analysis

    - name: Set up JDK 8
      uses: actions/setup-java@v4
      with:
        java-version: '8'
        distribution: 'temurin'
        cache: gradle

    - name: Grant execute permission for gradlew
      run: chmod +x gradlew

    - name: Run tests and generate coverage
      run: ./gradlew test jacocoTestReport

    - name: Upload test results to Codecov
      if: ${{ always() }}
      uses: codecov/test-results-action@v1
      with:
        token: ${{ secrets.CODECOV_TOKEN }}
        files: |
          **/build/test-results/test/*.xml
          **/build/test-results/test/**/*.xml

    - name: Run code quality checks
      run: |
        ./gradlew detekt
        ./gradlew ktlintCheck

    - name: Build project
      run: ./gradlew build -x test

    - name: Set up JDK 11 for documentation
      uses: actions/setup-java@v4
      with:
        java-version: '11'
        distribution: 'temurin'
        cache: gradle

    - name: Generate documentation coverage
      run: ./gradlew allDocumentationCoverage

    - name: Generate and verify documentation
      env:
        JAVA_HOME: ${{ env.JAVA_HOME_11_X64 }}
        GRADLE_OPTS: "-Xmx2g -XX:MaxMetaspaceSize=1024m"
      run: |
        # Switch to JDK 11 for documentation generation (supports HTML5)
        export PATH=$JAVA_HOME/bin:$PATH
        echo "Using Java for documentation: $(java -version 2>&1 | head -1)"

        ./gradlew javadoc javadocJar
        echo "Generated javadoc JARs for core modules:"
        find . -name "*javadoc*.jar" -type f | grep -v example | grep -v benchmarks

        # Comprehensive verification that javadoc JARs contain proper content (core modules only)
        echo "Verifying core module javadoc JAR contents..."
        for jar in $(find . -name "*javadoc*.jar" -type f | grep -v example | grep -v benchmarks); do
          echo "=== Checking $jar ==="
          # Check if index.html exists in the JAR
          if jar -tf "$jar" | grep -q "index.html"; then
            echo "✅ $jar contains index.html"
          else
            echo "❌ $jar missing index.html"
            echo "JAR contents:"
            jar -tf "$jar" | head -20
            exit 1
          fi
          # Check JAR size (should be more than just META-INF)
          jar_size=$(stat -c%s "$jar")
          if [ "$jar_size" -lt 10000 ]; then
            echo "❌ $jar is suspiciously small ($jar_size bytes)"
            jar -tf "$jar"
            exit 1
          else
            echo "✅ $jar size looks good ($jar_size bytes)"
          fi
        done

        echo "✅ All javadoc JARs verified successfully!"

    - name: Upload coverage to Codecov
      if: ${{ always() }}
      uses: codecov/codecov-action@v5
      with:
        token: ${{ secrets.CODECOV_TOKEN }}
        files: "**/build/reports/jacoco/test/jacocoTestReport.xml"
        flags: unittests
        name: codecov-umbrella
        fail_ci_if_error: false

    - name: Upload test results
      uses: actions/upload-artifact@v4
      if: always()
      with:
        name: test-results
        path: |
          **/build/test-results/
          **/build/reports/tests/
          **/build/reports/jacoco/
          **/build/reports/detekt/
          **/build/reports/documentation/

    - name: Comment PR with coverage
      if: ${{ always() && github.event_name == 'pull_request' }}
      uses: codecov/codecov-action@v5
      with:
        token: ${{ secrets.CODECOV_TOKEN }}
        flags: unittests
        name: codecov-umbrella
